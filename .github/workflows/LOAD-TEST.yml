name: LOAD-TEST

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04
    environment:
      name: github actions setup mysql
      url: https://github.com/donggi-lee-bit/comma/settings/environments/853859783/edit
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Setting MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'commatest'
          mysql user: 'donggi'
          mysql password: ${{ secrets.DatabasePassword }}

      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Insert Database Information
        run: |
          sed -i "s|\${MYSQL_DATABASE_URL}|$MYSQL_DATABASE_URL|g" ./src/main/resources/application-db.yml
          sed -i "s|\${MYSQL_DATABASE_USERNAME}|$MYSQL_DATABASE_USERNAME|g" ./src/main/resources/application-db.yml
          sed -i "s|\${MYSQL_DATABASE_PASSWORD}|$MYSQL_DATABASE_PASSWORD|g" ./src/main/resources/application-db.yml
        env:
          MYSQL_DATABASE_URL: ${{ secrets.MYSQL_DATABASE_URL }}
          MYSQL_DATABASE_USERNAME: ${{ secrets.MYSQL_DATABASE_USERNAME }}
          MYSQL_DATABASE_PASSWORD: ${{ secrets.MYSQL_DATABASE_PASSWORD }}

      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.PROPERTIES_PROD }}" >> ./application-auth.yml
        shell: bash

      - name: Build With Gradle
        run: ./gradlew build

      - name: Docker build & Push
        run: |
          docker login -u "${{ secrets.DOCKER_ID }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          docker build -f Dockerfile -t "${{ secrets.DOCKER_REPO }}"/comma .
          docker push "${{ secrets.DOCKER_REPO }}"/comma

      - name: EC2 Run For Load Test - (Controller, Agent, Test Server)
        run: aws ec2 start-instances --instance-ids ${{ secrets.AWS_EC2_NGRINDER_CONTROLLER }} ${{ secrets.AWS_EC2_NGRINDER_AGENT }} ${{ secrets.AWS_EC2_SPRING_TEST_SERVER }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Wait For The EC2
        run: sleep 15s
        shell: bash

      - name: Setting Public IP Address
        run: |
          export AWS_EC2_TEST_SERVER_IP=$(aws ec2 describe-instances --instance-ids ${{ secrets.AWS_EC2_SPRING_TEST_SERVER }} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          export AWS_EC2_CONTROLLER_IP=$(aws ec2 describe-instances --instance-ids ${{ secrets.AWS_EC2_NGRINDER_CONTROLLER }} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          export AWS_EC2_AGENT_IP=$(aws ec2 describe-instances --instance-ids ${{ secrets.AWS_EC2_NGRINDER_AGENT }} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          
          echo "$AWS_EC2_TEST_SERVER_IP"
          echo "$AWS_EC2_CONTROLLER_IP"
          echo "$AWS_EC2_AGENT_IP"

          echo "AWS_EC2_TEST_SERVER_IP=$AWS_EC2_TEST_SERVER_IP" >> $GITHUB_ENV
          echo "AWS_EC2_CONTROLLER_IP=$AWS_EC2_CONTROLLER_IP" >> $GITHUB_ENV
          echo "AWS_EC2_AGENT_IP=$AWS_EC2_AGENT_IP" >> $GITHUB_ENV

        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Run remote ssh command plugin to test server EC2
        uses: appleboy/ssh-action@master
        with:
          host: "${{ env.AWS_EC2_TEST_SERVER_IP }}"
          username: "${{ secrets.TEST_EC2_USERNAME }}"
          key: "${{ secrets.TEST_EC2_PRIVATE_KEY }}"
          envs: GITHUB_SHA
          script: |
            docker stop comma
            docker rm comma
            sudo docker pull "${{ secrets.DOCKER_REPO }}"/comma
            docker run -d --name comma -p 8080:8080 "${{ secrets.DOCKER_REPO }}"/comma

      - name: Run remote ssh command plugin to nGrinder Controller
        uses: appleboy/ssh-action@master
        with:
          host: "${{ env.AWS_EC2_CONTROLLER_IP }}"
          username: "${{ secrets.NGRINDER_EC2_USERNAME }}"
          key: "${{ secrets.NGRINDER_EC2_PRIVATE_KEY }}"
          envs: GITHUB_SHA
          script: |
            sh ./controller_run.sh

      - name: Run remote ssh command plugin to nGrinder Agent
        uses: appleboy/ssh-action@master
        with:
          host: "${{ env.AWS_EC2_AGENT_IP }}"
          username: "${{ secrets.NGRINDER_EC2_USERNAME }}"
          key: "${{ secrets.NGRINDER_EC2_PRIVATE_KEY }}"
          envs: GITHUB_SHA
          script: |
            sh ./agent_run.sh

      - name: Wait For The Controller, Agent To Run
        run: sleep 30s
        shell: bash

      - name: HTTP Request Action - Ngrinder rest api perf_test
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'http://${{ env.AWS_EC2_CONTROLLER_IP }}/perftest/api'
          method: 'POST'
          username: 'admin'
          password: 'admin'
          customHeaders: '{"Content-Type": "application/json"}'
          data: '{"param" : "${{ env.AWS_EC2_TEST_SERVER_IP }}", "testName" : "comma-load-test", "scriptName" : "test1.groovy", "runCount" : 1, "agentCount" : 1, "vuserPerAgent" : 10, "processes" : 2, "threads" : 5, "testComment" : "부하테스트 workflow 테스트 스크립트 실행", "status" : "READY", "duration" : "1200000"}'

      - name: Get Ngrinder Test Result
        uses: satak/webrequest-action@master
        id: NgrinderTestResult
        with:
          url: 'http://${{ env.AWS_EC2_CONTROLLER_IP }}/perftest/api?page=0'
          method: GET
          username: admin
          password: admin

      - name: Show Ngrinder Test Result
        run: |
          $output = '${{ steps.NgrinderTestResult.outputs.output }}' | ConvertFrom-Json
          Write-Host "Time from output $($output.time) statusCode $($output.statusCode) data $($output.data)"

      - name: Stop EC2 - (Controller, Agent, Test Server)
        run: aws ec2 stop-instances --instance-ids ${{ secrets.AWS_EC2_NGRINDER_CONTROLLER }} ${{ secrets.AWS_EC2_NGRINDER_AGENT }} ${{ secrets.AWS_EC2_SPRING_TEST_SERVER }}
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}


