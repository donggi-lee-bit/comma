name: CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04
    environment:
      name: github actions setup mysql
      url: https://github.com/donggi-lee-bit/comma/settings/environments/853859783/edit

    steps:
      - name: Setting MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'commatest'
          mysql user: 'donggi'
          mysql password: ${{ secrets.DatabasePassword }}
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Insert Database Information
        run: |
          sed -i "s|\${MYSQL_DATABASE_URL}|$MYSQL_DATABASE_URL|g" ./src/main/resources/application-db.yml
          sed -i "s|\${MYSQL_DATABASE_USERNAME}|$MYSQL_DATABASE_USERNAME|g" ./src/main/resources/application-db.yml
          sed -i "s|\${MYSQL_DATABASE_PASSWORD}|$MYSQL_DATABASE_PASSWORD|g" ./src/main/resources/application-db.yml
        env:
          MYSQL_DATABASE_URL: ${{ secrets.MYSQL_DATABASE_URL }}
          MYSQL_DATABASE_USERNAME: ${{ secrets.MYSQL_DATABASE_USERNAME }}
          MYSQL_DATABASE_PASSWORD: ${{ secrets.MYSQL_DATABASE_PASSWORD }}

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.PROPERTIES_PROD }}" >> ./application-auth.yml
        shell: bash

      - name: Build With Gradle
        run: ./gradlew build

      - name: Docker build & Push
        run: |
          docker login -u "${{ secrets.DOCKER_ID }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          docker build -f Dockerfile -t "${{ secrets.DOCKER_REPO }}"/comma .
          docker push "${{ secrets.DOCKER_REPO }}"/comma

      - name: Run remote ssh command plugin
        uses: appleboy/ssh-action@v0.1.8
        id: deploy-prod
        with:
          host: "${{ secrets.EC2_HOST }}"
          username: "${{ secrets.EC2_USERNAME }}"
          key: "${{ secrets.EC2_PRIVATE_KEY }}"
          envs: GITHUB_SHA
          script: |
            docker stop comma
            docker rm comma
            sudo docker pull "${{ secrets.DOCKER_REPO }}"/comma
            docker run -d --name comma -p 8080:8080 "${{ secrets.DOCKER_REPO }}"/comma
            docker rmi -f $(docker images -f "dangling=true" -q)
